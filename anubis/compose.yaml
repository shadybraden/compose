---
services:
  anubis:
    image: ghcr.io/techarohq/anubis:v1.21.3
    container_name: anubis
    environment:
      - BIND=:8082
      - DIFFICULTY=4
      - SERVE_ROBOTS_TXT=true
      - 'TARGET= '
      - COOKIE_DOMAIN=${DOMAIN}
      - REDIRECT_DOMAINS=${DOMAIN}
      - PUBLIC_URL=https://anubis.${DOMAIN}
      - OG_PASSTHROUGH=true
      - OG_EXPIRY_TIME=24h
    healthcheck:
      test: ["CMD", "anubis", "--healthcheck"]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 500ms
    ports:
      - 8082:8080
    security_opt:
      - no-new-privileges:true  # helps to increase security
    networks:
      - intranet
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.anubis.entrypoints=http"
      - "traefik.http.routers.anubis.rule=Host(`anubis.${DOMAIN}`)"
      - "traefik.http.middlewares.anubis-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.anubis.middlewares=anubis-https-redirect"
      - "traefik.http.routers.anubis-secure.entrypoints=https"
      - "traefik.http.routers.anubis-secure.rule=Host(`anubis.${DOMAIN}`)"
      - "traefik.http.routers.anubis-secure.tls=true"
      - "traefik.http.routers.anubis-secure.service=anubis"
      - "traefik.http.services.anubis.loadbalancer.server.port=8082"  # port of the service.
      - "traefik.docker.network=intranet"
      - "traefik.http.routers.anubis.priority=1"  # Setting Anubis to the lowest priority, so it only takes the slack
      - "traefik.http.routers.anubis.rule=PathRegexp(`.*`)"  # Wildcard match every path
      - "traefik.http.routers.anubis.entrypoints=websecure"  # Listen on HTTPS
      - "traefik.http.routers.anubis.service=anubis"  # Telling Traefik to use the above specified port
      - "traefik.http.routers.anubis.tls.certresolver=le"  # Telling Traefik to resolve a Cert for Anubis

networks:
  intranet:
    external: true
